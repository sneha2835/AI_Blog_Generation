GenBlog/api/

1.__init__.py

2. admin.py

from django.contrib import admin
from .models import User, Blog

admin.site.register(User)
admin.site.register(Blog)

3. apps.py

from django.apps import AppConfig


class ApiConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'api'

4. models.py

from django.db import models
from django.contrib.auth.models import AbstractUser

# ✅ Custom User Model
class User(AbstractUser):
    email = models.EmailField(unique=True)

# ✅ Blog Model (Now Correctly Uses `author` ForeignKey)
class Blog(models.Model):
    author = models.ForeignKey(User, on_delete=models.CASCADE, related_name="blogs")  # ✅ Fix: Use "author" instead of "user"
    title = models.CharField(max_length=255)
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.title

5. serializers.py

from rest_framework import serializers
from .models import Blog, User

class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ['id', 'username', 'email']

class BlogSerializer(serializers.ModelSerializer):
    class Meta:
        model = Blog
        fields = ['id', 'title', 'content', 'created_at']

6. tests.py

from django.test import TestCase

# Create your tests here.

7. urls.py

from django.urls import path
from api.views import RegisterAPIView, LoginAPIView, BlogGenerateAPIView, SaveBlogAPIView, BlogHistoryAPIView, home

urlpatterns = [
    path("", home, name="home"),
    path("register/", RegisterAPIView.as_view(), name="register"),
    path("login/", LoginAPIView.as_view(), name="login"),
    path("generate-blog/", BlogGenerateAPIView.as_view(), name="generate-blog"),
    path("save-blog/", SaveBlogAPIView.as_view(), name="save-blog"),  # ✅ FIXED: Added missing endpoint
    path("blogs/", BlogHistoryAPIView.as_view(), name="blogs"),
]

8. views.py

from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated, AllowAny
from rest_framework_simplejwt.tokens import RefreshToken
from django.contrib.auth import authenticate
from django.http import JsonResponse
from .models import User, Blog
from .serializers import BlogSerializer
import requests
import os

# ✅ Home View
def home(request):
    return JsonResponse({"message": "Welcome to the Blog Generator API!"})

# ✅ Fixed Registration API (Now Properly Hashes Password)
class RegisterAPIView(APIView):
    permission_classes = [AllowAny]  # Allow anyone to register

    def post(self, request):
        username = request.data.get("username")
        email = request.data.get("email")
        password = request.data.get("password")
        confirm_password = request.data.get("confirm_password")

        if not username or not email or not password or not confirm_password:
            return Response({"error": "All fields are required"}, status=400)

        if password != confirm_password:
            return Response({"error": "Passwords do not match"}, status=400)

        if User.objects.filter(username=username).exists():
            return Response({"error": "Username already taken"}, status=400)

        user = User(username=username, email=email)
        user.set_password(password)  # ✅ Fix: Hash the password properly
        user.save()

        refresh = RefreshToken.for_user(user)
        return Response({"message": "User registered successfully", "token": str(refresh.access_token)}, status=201)

# ✅ Fixed Login API (Properly Authenticates Users)
class LoginAPIView(APIView):
    permission_classes = [AllowAny]  # Allow anyone to log in

    def post(self, request):
        username = request.data.get("username")
        password = request.data.get("password")

        if not username or not password:
            return Response({"error": "Both username and password are required"}, status=400)

        # Fetch user from database
        user = User.objects.filter(username=username).first()

        # Check if user exists and password is correct
        if user and user.check_password(password):  # ✅ Ensure correct password check
            refresh = RefreshToken.for_user(user)
            return Response({
                "message": "Login successful",
                "token": str(refresh.access_token),
                "username": user.username
            }, status=200)

        return Response({"error": "Invalid credentials"}, status=401)

# ✅ Fixed Blog Generation API (Now Works with LLaMA & Hugging Face API)
class BlogGenerateAPIView(APIView):
    permission_classes = [IsAuthenticated]  # ✅ User must be logged in

    def post(self, request):
        title = request.data.get("title")
        audience = request.data.get("audience")
        word_count = request.data.get("word_count")

        if not title or not audience or not word_count:
            return Response({"error": "All fields are required"}, status=400)

        prompt = f"Write a {word_count}-word blog for {audience} about {title}."

        # ✅ Use Local LLaMA Model
        MODEL_PATH = "models/llama-2-7b-chat.Q4_K_M.gguf"
        try:
            from langchain_community.llms import CTransformers

            llm = CTransformers(
                model=MODEL_PATH,
                model_type="llama",
                config={
                    "max_new_tokens": 100,
                    "temperature": 0.3,
                    "context_length": 256,
                    "batch_size": 4,
                }
            )
            blog_content = llm.invoke(prompt)

        except Exception as e:
            # ✅ Fallback to Hugging Face API if Local Model Fails
            HF_API_URL = "https://api-inference.huggingface.co/models/meta-llama/Llama-2-7b-chat-hf"
            headers = {"Authorization": f"Bearer {os.getenv('HUGGINGFACE_API_KEY')}"}
            response = requests.post(HF_API_URL, json={"inputs": prompt}, headers=headers)

            if response.status_code == 200:
                result = response.json()
                blog_content = result[0].get("generated_text", "No content generated.") if isinstance(result, list) else "Error: No valid response."
            else:
                return Response({"error": "Model error"}, status=500)

        return Response({"blog_content": blog_content}, status=200)

# ✅ Fixed Save Blog API (Now Saves to MySQL)
class SaveBlogAPIView(APIView):
    permission_classes = [IsAuthenticated]  # ✅ User must be logged in

    def post(self, request):
        title = request.data.get("title")
        content = request.data.get("content")

        if not title or not content:
            return Response({"error": "Title and content are required"}, status=400)

        # ✅ Fix: Use request.user as the author
        blog = Blog.objects.create(title=title, content=content, author=request.user)
        return Response(BlogSerializer(blog).data, status=201)

# ✅ Fixed Blog History API (Fetches User’s Saved Blogs)
class BlogHistoryAPIView(APIView):
    permission_classes = [IsAuthenticated]  # ✅ User must be logged in

    def get(self, request):
        blogs = Blog.objects.filter(author=request.user)  # ✅ Fix: Filter by logged-in user
        return Response(BlogSerializer(blogs, many=True).data, status=200)



GenBlog/BlogGen/

1. __init__.py

2. asgi.py

"""
ASGI config for BlogGen project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'BlogGen.settings')

application = get_asgi_application()

3. settings.py

import os
from dotenv import load_dotenv
from pathlib import Path
from datetime import timedelta

# Load environment variables
load_dotenv()

BASE_DIR = Path(__file__).resolve().parent.parent

# Security settings
SECRET_KEY = os.getenv("SECRET_KEY", "your-default-secret-key")
DEBUG = os.getenv("DEBUG", "True") == "True"
ALLOWED_HOSTS = ['127.0.0.1', 'localhost']

# Installed applications
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'api',  # Your API app
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',  # Enable CORS for Streamlit
]

# ✅ DRF Authentication settings (JWT-based)
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',  # Allow registration & login without auth
    ],
}

# ✅ JWT Token Configuration
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=1),  # Users stay logged in for 1 day
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "ROTATE_REFRESH_TOKENS": True,  # Auto-refresh tokens
    "BLACKLIST_AFTER_ROTATION": True,
    "AUTH_HEADER_TYPES": ("Bearer",),
}

# ✅ CORS Settings (Fixes frontend communication)
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CORS_ALLOWED_ORIGINS = [
    "http://localhost:8501",  # Streamlit frontend
    "http://127.0.0.1:8501"
]
CORS_ALLOW_CREDENTIALS = True

# ✅ Database Configuration (MySQL)
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.getenv("MYSQL_DB_NAME", "blog_db"),
        'USER': os.getenv("MYSQL_USER", "root"),
        'PASSWORD': os.getenv("MYSQL_PASSWORD", "root"),
        'HOST': os.getenv("MYSQL_HOST", "localhost"),
        'PORT': os.getenv("MYSQL_PORT", "3306"),
        'OPTIONS': {'charset': 'utf8mb4'},  # Fix for special characters
    }
}

# ✅ Static & Media Files (Fixes `STATIC_URL` issue)
STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# ✅ Use custom User model
AUTH_USER_MODEL = "api.User"

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],  # Ensure templates folder exists
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

ROOT_URLCONF = 'BlogGen.urls'
WSGI_APPLICATION = 'BlogGen.wsgi.application'
ASGI_APPLICATION = 'BlogGen.asgi.application'

# ✅ Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# ✅ Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

4. urls.py

from django.contrib import admin
from django.urls import path, include
from api.views import home

urlpatterns = [
    path("", home, name="home"),
    path("admin/", admin.site.urls),
    path("api/", include("api.urls")),  # ✅ Ensure this line is present
]

5. views.py

from django.http import JsonResponse

def home(request):
    return JsonResponse({"message": "Welcome to the Blog Generator API!"})
def register_user(request):
    return JsonResponse({"message": "Register API working!"})

def login_user(request):
    return JsonResponse({"message": "Login API working!"})

def blog_view(request):
    return JsonResponse({"message": "Blog API working!"})

6. wsgi.py

"""
WSGI config for BlogGen project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'BlogGen.settings')

application = get_wsgi_application()


GenBlog/streamlit_app/

1. app.py

import streamlit as st
from llama_cpp import Llama
import os

# Load LLaMA 2 model locally
MODEL_PATH = "C:/GenBlog/models/llama-2-7b-chat.Q4_K_M.gguf"

if not os.path.exists(MODEL_PATH):
    st.error("LLaMA 2 model file not found. Please check the path.")

# Initialize the model
llm = Llama(model_path=MODEL_PATH, n_ctx=2048)

# Function to Generate Blogs
def generate_blogs(title, audience, word_count):
    prompt = f"Write a {word_count}-word blog for {audience} about {title}."
    output = llm(prompt, max_tokens=word_count)
    return output["choices"][0]["text"]

# Streamlit UI
st.title("AI-Powered Blog Generator")
st.sidebar.header("Options")

title = st.text_input("Enter Blog Title", placeholder="Example: The Future of AI")
audience = st.selectbox("Target Audience", ["Tech Enthusiasts", "Business Owners", "Students", "General Public"])
word_count = st.slider("Word Count", 100, 1000, step=50)

if st.button("Generate Blog"):
    with st.spinner("Generating..."):
        blog_content = generate_blogs(title, audience, word_count)
    st.write(blog_content)

GenBlog/

.env

SECRET_KEY="%m1t!s_w4adrf^q#kfimxp(^toq+-0#twv*jvpu3#2h*7kav(#"
DEBUG=True
MYSQL_DB_NAME="blog_db"
MYSQL_USER="root"
MYSQL_PASSWORD="root"
MYSQL_HOST="localhost"
MYSQL_PORT="3306"

.gitignore

# Virtual Environment
venv/
.env

# Python Cache Files
__pycache__/
*.pyc
*.pyo
*.pyd

# Django & MySQL Files
db.sqlite3
*.db
/media/
/staticfiles/

# Logs & Debugging
*.log
debug.log

# IDE & Editor Files
.vscode/
.idea/
*.swp
*.swo

# Streamlit Caching & Configs
.streamlit/
.stcache/
.stcli/

# Compiled Model Files
models/
*.gguf
*.bin
*.tflite

# Node Modules (If Frontend Uses JS)
node_modules/
package-lock.json
yarn.lock

# Docker & Deployment
docker-compose.override.yml
*.dockerfile

# Git Ignore Itself (Just In Case)
.gitignore


manage.py
#!/usr/bin/env python
"""
Django's command-line utility for administrative tasks.
"""

import os
import sys


def main():
    """
    Run administrative tasks.

    This function sets up the Django environment and executes commands 
    provided via the command line.
    """
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'BlogGen.settings')

    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Make sure it's installed and "
            "available on your PYTHONPATH environment variable. Did you "
            "forget to activate a virtual environment?"
        ) from exc

    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

requirements.py

accelerate==1.4.0
aiohappyeyeballs==2.5.0
aiohttp==3.11.13
aiosignal==1.3.2
altair==5.5.0
annotated-types==0.7.0
anyio==4.8.0
asgiref==3.8.1
attrs==25.1.0
bitsandbytes==0.45.3
blinker==1.9.0
cachetools==5.5.2
certifi==2025.1.31
charset-normalizer==3.4.1
click==8.1.8
cmake==3.31.6
colorama==0.4.6
ctransformers==0.2.27
dataclasses-json==0.6.7
Django==5.1.7
django-cors-headers==4.7.0
djangorestframework==3.15.2
djangorestframework_simplejwt==5.5.0
filelock==3.17.0
frozenlist==1.5.0
fsspec==2025.3.0
gitdb==4.0.12
GitPython==3.1.44
greenlet==3.1.1
h11==0.14.0
httpcore==1.0.7
httpx==0.28.1
httpx-sse==0.4.0
huggingface-hub==0.29.2
idna==3.10
Jinja2==3.1.6
joblib==1.4.2
jsonpatch==1.33
jsonpointer==3.0.0
jsonschema==4.23.0
jsonschema-specifications==2024.10.1
langchain==0.3.20
langchain-community==0.3.19
langchain-core==0.3.43
langchain-text-splitters==0.3.6
langsmith==0.2.11
MarkupSafe==3.0.2
marshmallow==3.26.1
mpmath==1.3.0
multidict==6.1.0
mypy-extensions==1.0.0
mysqlclient==2.2.7
narwhals==1.29.1
networkx==3.4.2
ninja==1.11.1.3
numpy==2.2.3
orjson==3.10.15
packaging==24.2
pandas==2.2.3
pathspec==0.12.1
pillow==11.1.0
propcache==0.3.0
protobuf==5.29.3
psutil==7.0.0
py-cpuinfo==9.0.0
pyarrow==19.0.1
pydantic==2.10.6
pydantic-settings==2.8.1
pydantic_core==2.27.2
pydeck==0.9.1
PyJWT==2.9.0
python-box==7.3.2
python-dateutil==2.9.0.post0
python-dotenv==1.0.1
pytz==2025.1
PyYAML==6.0.2
referencing==0.36.2
regex==2024.11.6
requests==2.32.3
requests-toolbelt==1.0.0
rpds-py==0.23.1
safetensors==0.5.3
scikit-learn==1.6.1
scikit_build_core==0.11.0
scipy==1.15.2
sentence-transformers==3.4.1
sentencepiece==0.2.0
setuptools==76.0.0
six==1.17.0
smmap==5.0.2
sniffio==1.3.1
SQLAlchemy==2.0.38
sqlparse==0.5.3
streamlit==1.43.1
sympy==1.13.1
tenacity==9.0.0
threadpoolctl==3.5.0
tokenizers==0.21.0
toml==0.10.2
torch==2.6.0
tornado==6.4.2
tqdm==4.67.1
transformers==4.49.0
typing-inspect==0.9.0
typing_extensions==4.12.2
tzdata==2025.1
urllib3==2.3.0
uvicorn==0.34.0
watchdog==6.0.0
wheel==0.45.1
yarl==1.18.3




